{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Make_video-predict.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yuuOkada/Sphere_CNN/blob/master/Make_video_predict.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2RbsG-pVrvZH",
        "colab_type": "text"
      },
      "source": [
        "Colab Instance起動からの経過時間: 0.5daysでShutdown"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H4UK0kSyrvOs",
        "colab_type": "code",
        "outputId": "056989db-f87d-44ce-ef15-95497f8c9f26",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "!cat /proc/uptime | awk '{print $1 /60 /60 /24 \"days (\" $1 \"sec)\"}'"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.00399514days (345.18sec)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TnJ5O_PsRx62",
        "colab_type": "text"
      },
      "source": [
        "Connect to Google Drive File Stream\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_hpTBhj4Rkuv",
        "colab_type": "code",
        "outputId": "c704e4fb-20f5-4cb2-f839-c95d626fd8bd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 124
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('./gdrive')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at ./gdrive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "07dyIRBWR7Cb",
        "colab_type": "text"
      },
      "source": [
        "Sphere Predict (7:5), *shape(60,110,3) , 8Class*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2aiawM6KRxAe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os\n",
        "import cv2\n",
        "import time\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow import keras\n",
        "from keras import models\n",
        "from keras.models import model_from_json\n",
        "from keras.preprocessing import image\n",
        "\n",
        "root_dir = \"./gdrive/My Drive/Google Colab/CO191219_proj\"\n",
        "\n",
        "#保存したモデルの読み込み\n",
        "model = model_from_json(open(root_dir+'/Conv2D3-Dence3-Adadelta_v2/img_predict_Conv2D3-Dence3-Adadelta.json').read())\n",
        "#保存した重みの読み込み\n",
        "model.load_weights(root_dir+'/Conv2D3-Dence3-Adadelta_v2/img_predict_Conv2D3-Dence3-Adadelta.hdf5')\n",
        "\n",
        "categories = [\"ceiling\", \"cloth\", \"floor\", \"floor-object\",\"hole\", \"human\", \"object\", \"wall\"]\n",
        "\n",
        "# 定数定義\n",
        "ESC_KEY = 27     # Escキー\n",
        "\n",
        "# 元ビデオファイル読み込み\n",
        "mov_org = cv2.VideoCapture(root_dir + \"/demovideo/demovideo.mp4\")\n",
        "\n",
        "ret, frame = mov_org.read()\n",
        "print(frame.shape)\n",
        "\n",
        "# 変換処理ループ\n",
        "while ret == True:\n",
        "    flt32_frame = frame.astype(np.float32)\n",
        "\n",
        "    vartical_index = 0\n",
        "    horizonatal_index = 0\n",
        "    predict_result = np.empty(0)\n",
        "\n",
        "    for vartical_num in range(0, 864, 215):\n",
        "        for horizontal_num in range(15, 1635, 269):\n",
        "\n",
        "            fr = frame[vartical_num:vartical_num+215, horizontal_num:horizontal_num+269]\n",
        "            cv2.imwrite(root_dir  + \"/demovideo/temp_frame.jpg\", fr)\n",
        "\n",
        "            img = image.load_img(root_dir  + \"/demovideo/temp_frame.jpg\", target_size=(90, 110, 3))\n",
        "            x = image.img_to_array(img)\n",
        "            x = np.expand_dims(x, axis=0)\n",
        "\n",
        "            features = model.predict(x)\n",
        "\n",
        "            max_features = np.amax(features)\n",
        "            if max_features == 0:\n",
        "                predict_result = np.append(predict_result, 0)\n",
        "            elif features[0,0] == max_features:\n",
        "                predict_result = np.append(predict_result, 1)\n",
        "            elif features[0,1] == max_features:\n",
        "                predict_result = np.append(predict_result, 2)\n",
        "            elif features[0,2] == max_features:\n",
        "                predict_result = np.append(predict_result, 3)\n",
        "            elif features[0,3] == max_features:\n",
        "                predict_result = np.append(predict_result, 4)\n",
        "            elif features[0,4] == max_features:\n",
        "                predict_result = np.append(predict_result, 5)\n",
        "            elif features[0,5] == max_features:\n",
        "                predict_result = np.append(predict_result, 6)\n",
        "            elif features[0,6] == max_features:\n",
        "                predict_result = np.append(predict_result, 7)\n",
        "            elif features[0,7] == max_features:\n",
        "                predict_result = np.append(predict_result, 8)\n",
        "            else:\n",
        "                predict_result = np.append(predict_result, 0)\n",
        "\n",
        "    predict_result = predict_result.reshape(5,7)\n",
        "    print(predict_result)\n",
        "\n",
        "    # Escキーで終了\n",
        "    key = cv2.waitKey(INTERVAL)\n",
        "    if key == ESC_KEY:\n",
        "        break\n",
        "\n",
        "    # 次のフレーム読み込み\n",
        "    ret, frame = mov_org.read()\n",
        "\n",
        "# 終了処理\n",
        "cv2.destroyAllWindows()\n",
        "mov_org.release()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9KyXAso3qHDc",
        "colab_type": "text"
      },
      "source": [
        "Sphere Predict (11:9) , *shape(60,110,3) , 8Class*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RH3kY6sIfqjd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os\n",
        "import cv2\n",
        "import time\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow import keras\n",
        "from keras import models\n",
        "from keras.models import model_from_json\n",
        "from keras.preprocessing import image\n",
        "\n",
        "root_dir = \"./gdrive/My Drive/Google Colab/CO191219_proj\"\n",
        "\n",
        "#保存したモデルの読み込み\n",
        "model = model_from_json(open(root_dir+'/Conv2D3-Dence3-Adadelta_v2/img_predict_Conv2D3-Dence3-Adadelta.json').read())\n",
        "#保存した重みの読み込み\n",
        "model.load_weights(root_dir+'/Conv2D3-Dence3-Adadelta_v2/img_predict_Conv2D3-Dence3-Adadelta.hdf5')\n",
        "\n",
        "categories = [\"ceiling\", \"cloth\", \"floor\", \"floor-object\",\"hole\", \"human\", \"object\", \"wall\"]\n",
        "\n",
        "# 定数定義\n",
        "ESC_KEY = 27     # Escキー\n",
        "INTERVAL= 1     # インターバル\n",
        "FRAME_RATE = 5  # fps\n",
        "\n",
        "# 元ビデオファイル読み込み\n",
        "mov_org = cv2.VideoCapture(root_dir + \"/demovideo/demovideo.mp4\")\n",
        "\n",
        "ret, frame = mov_org.read()\n",
        "#print(frame.shape)\n",
        "\n",
        "# 出力動画のコーデック設定\n",
        "#width = int(mov_org.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
        "#height = int(mov_org.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
        "#fps = mov_org.get(cv2.CAP_PROP_FPS)\n",
        "#fourcc = cv2.VideoWriter_fourcc(*'XVID')\n",
        "#mov_out = cv2.VideoWriter(filename + '_output.avi', fourcc, fps, (width,height))\n",
        "\n",
        "# 変換処理ループ\n",
        "while ret == True:\n",
        "    flt32_frame = frame.astype(np.float32)\n",
        "\n",
        "    predict_result = np.empty(0)\n",
        "\n",
        "    for vartical_index in range(0, 972, 108):\n",
        "        for horizontal_index in range(15, 1770, 135):\n",
        "          \n",
        "          #print(str(horizontal_index) + \",\" + str(vartical_index))\n",
        "\n",
        "          if ((vartical_index % 216 == 0) and ((horizontal_index-15) % 270 == 0)) or vartical_index >= 540:\n",
        "\n",
        "              fr = frame[vartical_index:vartical_index+215, horizontal_index:horizontal_index+269]\n",
        "              cv2.imwrite(root_dir  + \"/demovideo/temp_frame.jpg\", fr)\n",
        "\n",
        "              img = image.load_img(root_dir  + \"/demovideo/temp_frame.jpg\", target_size=(90, 110, 3))\n",
        "              x = image.img_to_array(img)\n",
        "              x = np.expand_dims(x, axis=0)\n",
        "\n",
        "              features = model.predict(x)\n",
        "              #print(features)\n",
        "              max_features = np.amax(features)\n",
        "\n",
        "              if max_features == 0:\n",
        "                  predict_result = np.append(predict_result, 0)\n",
        "              elif features[0,0] == max_features:\n",
        "                  predict_result = np.append(predict_result, 1)\n",
        "                  print(features[0,0])\n",
        "              elif features[0,1] == max_features:\n",
        "                  predict_result = np.append(predict_result, 2)\n",
        "                  print(features[0,1])\n",
        "              elif features[0,2] == max_features:\n",
        "                  predict_result = np.append(predict_result, 3)\n",
        "                  print(features[0,2])\n",
        "              elif features[0,3] == max_features:\n",
        "                  predict_result = np.append(predict_result, 4)\n",
        "                  print(features[0,3])\n",
        "              elif features[0,4] == max_features:\n",
        "                  predict_result = np.append(predict_result, 5)\n",
        "                  print(features[0,4])\n",
        "              elif features[0,5] == max_features:\n",
        "                  predict_result = np.append(predict_result, 6)\n",
        "                  print(features[0,5])\n",
        "              elif features[0,6] == max_features:\n",
        "                  predict_result = np.append(predict_result, 7)\n",
        "                  print(features[0,6])\n",
        "              elif features[0,7] == max_features:\n",
        "                  predict_result = np.append(predict_result, 8)\n",
        "                  print(features[0,7])\n",
        "              else:\n",
        "                  predict_result = np.append(predict_result, 0)\n",
        "\n",
        "          else:\n",
        "              predict_result = np.append(predict_result, 0)\n",
        "              #print(\"out\")\n",
        "\n",
        "    predict_result = predict_result.reshape(9,13)\n",
        "    print(predict_result)\n",
        "\n",
        "    # Escキーで終了\n",
        "    key = cv2.waitKey(INTERVAL)\n",
        "    if key == ESC_KEY:\n",
        "        break\n",
        "\n",
        "    # 次のフレーム読み込み\n",
        "    ret, frame = mov_org.read()\n",
        "\n",
        "# 終了処理\n",
        "cv2.destroyAllWindows()\n",
        "mov_org.release()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D3Uvk9DOqF0y",
        "colab_type": "text"
      },
      "source": [
        "Sphere Predict (11:9), *shape(60,110,3) , 7-false8-Class*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6E3KplfpqGJU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os\n",
        "import cv2\n",
        "import time\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow import keras\n",
        "from keras import models\n",
        "from keras.models import model_from_json\n",
        "from keras.preprocessing import image\n",
        "\n",
        "root_dir = \"./gdrive/My Drive/Google Colab/CO191219_proj\"\n",
        "\n",
        "#保存したモデルの読み込み\n",
        "model = model_from_json(open(root_dir+'/Conv2D3-Dence3-Adadelta_v2/img_predict_Conv2D3-Dence3-Adadelta.json').read())\n",
        "#保存した重みの読み込み\n",
        "model.load_weights(root_dir+'/Conv2D3-Dence3-Adadelta_v2/img_predict_Conv2D3-Dence3-Adadelta.hdf5')\n",
        "\n",
        "categories = [\"floor1\", \"floor2\", \"floor-object\", \"object\", \"wall\", \"hole\", \"human\",\"ceiling\"]\n",
        "\n",
        "# 定数定義\n",
        "ESC_KEY = 27     # Escキー\n",
        "INTERVAL= 1     # インターバル\n",
        "FRAME_RATE = 5  # fps\n",
        "\n",
        "# 元ビデオファイル読み込み\n",
        "mov_org = cv2.VideoCapture(root_dir + \"/demovideo/demovideo.mp4\")\n",
        "\n",
        "ret, frame = mov_org.read()\n",
        "#print(frame.shape)\n",
        "\n",
        "# 出力動画のコーデック設定\n",
        "#width = int(mov_org.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
        "#height = int(mov_org.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
        "#fps = mov_org.get(cv2.CAP_PROP_FPS)\n",
        "#fourcc = cv2.VideoWriter_fourcc(*'XVID')\n",
        "#mov_out = cv2.VideoWriter(filename + '_output.avi', fourcc, fps, (width,height))\n",
        "\n",
        "# 変換処理ループ\n",
        "while ret == True:\n",
        "    flt32_frame = frame.astype(np.float32)\n",
        "\n",
        "    predict_result = np.empty(0)\n",
        "\n",
        "    for vartical_index in range(0, 972, 108):\n",
        "        for horizontal_index in range(15, 1770, 135):\n",
        "          \n",
        "          #print(str(horizontal_index) + \",\" + str(vartical_index))\n",
        "\n",
        "          if ((vartical_index % 216 == 0) and ((horizontal_index-15) % 270 == 0)) or vartical_index >= 540:\n",
        "\n",
        "              fr = frame[vartical_index:vartical_index+215, horizontal_index:horizontal_index+269]\n",
        "              cv2.imwrite(root_dir  + \"/demovideo/temp_frame.jpg\", fr)\n",
        "\n",
        "              img = image.load_img(root_dir  + \"/demovideo/temp_frame.jpg\", target_size=(90, 110, 3))\n",
        "              x = image.img_to_array(img)\n",
        "              x = np.expand_dims(x, axis=0)\n",
        "\n",
        "              features = model.predict(x)\n",
        "              #print(features)\n",
        "              max_features = np.amax(features)\n",
        "\n",
        "              if max_features == 0:\n",
        "                  predict_result = np.append(predict_result, 0)\n",
        "              elif features[0,0] == max_features:\n",
        "                  predict_result = np.append(predict_result, 1)\n",
        "                  print(features[0,0])\n",
        "              elif features[0,1] == max_features:\n",
        "                  predict_result = np.append(predict_result, 2)\n",
        "                  print(features[0,1])\n",
        "              elif features[0,2] == max_features:\n",
        "                  predict_result = np.append(predict_result, 3)\n",
        "                  print(features[0,2])\n",
        "              elif features[0,3] == max_features:\n",
        "                  predict_result = np.append(predict_result, 4)\n",
        "                  print(features[0,3])\n",
        "              elif features[0,4] == max_features:\n",
        "                  predict_result = np.append(predict_result, 5)\n",
        "                  print(features[0,4])\n",
        "              elif features[0,5] == max_features:\n",
        "                  predict_result = np.append(predict_result, 6)\n",
        "                  print(features[0,5])\n",
        "              elif features[0,6] == max_features:\n",
        "                  predict_result = np.append(predict_result, 7)\n",
        "                  print(features[0,6])\n",
        "              elif features[0,7] == max_features:\n",
        "                  predict_result = np.append(predict_result, 8)\n",
        "                  print(features[0,7])\n",
        "              else:\n",
        "                  predict_result = np.append(predict_result, 0)\n",
        "\n",
        "          else:\n",
        "              predict_result = np.append(predict_result, 0)\n",
        "              #print(\"out\")\n",
        "\n",
        "    predict_result = predict_result.reshape(9,13)\n",
        "    print(predict_result)\n",
        "\n",
        "    # Escキーで終了\n",
        "    key = cv2.waitKey(INTERVAL)\n",
        "    if key == ESC_KEY:\n",
        "        break\n",
        "\n",
        "    # 次のフレーム読み込み\n",
        "    ret, frame = mov_org.read()\n",
        "\n",
        "# 終了処理\n",
        "cv2.destroyAllWindows()\n",
        "mov_org.release()"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}
